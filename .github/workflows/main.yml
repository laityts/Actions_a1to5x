# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
     inputs:
       mode:
         description: 'Download mode(wget,aria2c,curl,axel)'

         required: true

         default: 'aria2c'

       filename:

         description: 'ROM NAME'

         required: false

       filelink:

         description: 'ROM LINK'

         required: true       
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          sudo -E apt-get -qq update

          sudo -E apt-get -qq install git openjdk-8-jdk wget curl rsync aria2 python python3 unzip device-tree-compiler brotli simg2img img2simg axel

          sudo apt install python-is-python3

          pip install --upgrade pip

          pip3 install protobuf

          pip install brotli 
          sudo -E apt-get -qq update

          sudo -E apt-get -qq install git openjdk-8-jdk wget curl rsync aria2 python python3 unzip device-tree-compiler brotli simg2img img2simg axel

          sudo apt install python-is-python3

          pip install --upgrade pip

          pip3 install protobuf

          echo Add other actions to build,

          echo test, and deploy your project.

      - name: Download
        run: |
          echo "Download"
          if [[ ! -z "${{ github.event.inputs.filename }}" ]]; then
              NAME="${{ github.event.inputs.filename }}"
              if [[ ! -z "$(echo ${NAME} | grep ".zip")" ]]; then
                  echo "::set-output name=filename::${NAME%.*}"
                  echo "${{ github.event.inputs.filename }}"
                  filename="${NAME%.*}"
              else
                  echo "::set-output name=filename::${{ github.event.inputs.filename }}"
                  echo "Null value"
                  filename="${{ github.event.inputs.filename }}"
              fi
              echo "filename: $filename"
              if [[ "${{ github.event.inputs.mode }}" == 'wget' ]]; then
                  wget ${{ github.event.inputs.filelink }} -O "${filename}.zip"
              elif [[ "${{ github.event.inputs.mode }}" == 'aria2c' ]]; then
                  aria2c -x16 -j$(nproc) ${{ github.event.inputs.filelink }} -o "${filename}.zip"             
              elif [[ "${{ github.event.inputs.mode }}" == 'curl' ]]; then
                  curl -L ${{ github.event.inputs.filelink }} -o "${filename}.zip"
              elif [[ "${{ github.event.inputs.mode }}" == 'axel' ]]; then
                  axel -n 16 ${{ github.event.inputs.filelink }} -o "${filename}.zip"
              fi             
          else              
              if [[ "${{ github.event.inputs.mode }}" == 'wget' ]]; then
                  wget --content-disposition -c ${{ github.event.inputs.filelink }}
              elif [[ "${{ github.event.inputs.mode }}" == 'aria2c' ]]; then
                  aria2c -x16 -j$(nproc) ${{ github.event.inputs.filelink }}             
              elif [[ "${{ github.event.inputs.mode }}" == 'curl' ]]; then
                  curl -OL ${{ github.event.inputs.filelink }}
              elif [[ "${{ github.event.inputs.mode }}" == 'axel' ]]; then
                  axel -n 16 ${{ github.event.inputs.filelink }}
              fi
              NAME="$(ls -lS *.zip | head -1 | awk '{print $9}')"
              if [ ! -z "$NAME" ]; then
                  filename=${NAME%.*}
              else        
                  tmp="$(find . -maxdepth 1 -type f -size +500M)"
                  if [ ! -z "$tmp" ]; then
                      ls -al
                      echo "Rename"
                      filename=$(echo $tmp | sed 's#./##')
                      mv $filename ${filename}.zip
                  else
                      echo "Download error"
                      exit 1
                  fi
              fi              
              echo "::set-output name=filename::$filename"
          fi
          ls -al
      - name: Payload Extractor

        run: |

          echo "Payload Dumper"

          unzip ${{ steps.var.outputs.filename }}.zip payload.bin

          rm -rf ${{ steps.var.outputs.filename }}.zip

          python3 update-payload-extractor/extract.py payload.bin --output_dir ./

          ls -al        
          
          - name: Debugging with tmate

           uses: mxschmitt/action-tmate@v3.5
          

           
